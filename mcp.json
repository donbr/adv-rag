{
  "mcpServers": {
    "mcp-server-time": {
      "command": "uvx",
      "args": [
        "mcp-server-time",
        "--local-timezone=America/Los_Angeles"
      ],
      "env": {}
    },
    "brave-search": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-brave-search"
      ],
      "env": {
        "BRAVE_API_KEY": "${BRAVE_API_KEY}"
      }
    },
    "fetch": {
      "command": "uvx",
      "args": [
        "mcp-server-fetch"
      ]
    },
    "sequential-thinking": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-sequential-thinking"
      ]
    },
    "ai-docs-server": {
      "command": "uvx",
      "args": [
        "--from",
        "mcpdoc",
        "mcpdoc",
        "--urls",
        "Cursor:https://docs.cursor.com/llms.txt",
        "CursorFull:https://docs.cursor.com/llms-full.txt",
        "PydanticAI:https://ai.pydantic.dev/llms.txt",
        "PydanticAIFull:https://ai.pydantic.dev/llms-full.txt",
        "MCPProtocol:https://modelcontextprotocol.io/llms.txt",
        "MCPProtocolFull:https://modelcontextprotocol.io/llms-full.txt",
        "FastMCP:https://gofastmcp.com/llms.txt",
        "FastMCPFull:https://gofastmcp.com/llms-full.txt",
        "ArizePhoenix:https://arize.com/docs/phoenix/llms.txt",
        "ArizePhoenixFull:https://arize.com/docs/phoenix/llms-full.txt",
        "GoogleA2A:https://google-a2a.github.io/A2A/latest/llms.txt",
        "LangGraph:https://langchain-ai.github.io/langgraph/llms.txt",
        "LangGraphFull:https://langchain-ai.github.io/langgraph/llms-full.txt",
        "LangGraphJS:https://langchain-ai.github.io/langgraphjs/llms.txt",
        "LangGraphJSFull:https://langchain-ai.github.io/langgraphjs/llms-full.txt",
        "LangChain:https://python.langchain.com/llms.txt",
        "LangChainJS:https://js.langchain.com/llms.txt",
        "VercelAISDK:https://sdk.vercel.ai/llms.txt",
        "Anthropic:https://docs.anthropic.com/llms.txt",
        "AnthropicFull:https://docs.anthropic.com/llms-full.txt",
        "--transport",
        "stdio",
        "--allowed-domains",
        "cursor.com",
        "ai.pydantic.dev",
        "modelcontextprotocol.io",
        "gofastmcp.com",
        "arize.com",
        "google-a2a.github.io",
        "langchain-ai.github.io",
        "langchain.com",
        "python.langchain.com",
        "sdk.vercel.ai",
        "docs.anthropic.com"
      ]
    },
    "redis-mcp": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-redis"
      ],
      "env": {
        "REDIS_URL": "redis://localhost:6379"
      }
    },
    "qdrant-code-snippets": {
      "command": "uvx",
      "args": [
        "mcp-server-qdrant"
      ],
      "env": {
        "QDRANT_URL": "http://localhost:6333",
        "COLLECTION_NAME": "code-snippets",
        "FASTMCP_PORT": "8002",
        "TOOL_STORE_DESCRIPTION": "Store reusable code snippets for later retrieval. The 'information' parameter should contain a natural language description of what the code does, while the actual code should be included in the 'metadata' parameter as a 'code' property. The value of 'metadata' is a Python dictionary with strings as keys. Use this whenever you generate some code snippet.",
        "TOOL_FIND_DESCRIPTION": "Search for relevant code snippets based on natural language descriptions. The 'query' parameter should describe what you're looking for, and the tool will return the most relevant code snippets. Use this when you need to find existing code snippets for reuse or reference."
      }
    },
    "qdrant-semantic-memory": {
      "command": "uvx",
      "args": [
        "mcp-server-qdrant"
      ],
      "env": {
        "QDRANT_URL": "http://localhost:6333",
        "COLLECTION_NAME": "semantic-memory",
        "FASTMCP_PORT": "8003",
        "TOOL_STORE_DESCRIPTION": "Store contextual information for semantic memory: conversation insights, project decisions, learned patterns, user preferences. Include descriptive information in the 'information' parameter and structured metadata for categorization and retrieval.",
        "TOOL_FIND_DESCRIPTION": "Search semantic memory for relevant context, decisions, and previously learned information. Use natural language queries to describe what type of information you're looking for."
      }
    },
    "phoenix": {
      "command": "npx",
      "args": [
        "-y",
        "@arizeai/phoenix-mcp@latest",
        "--baseUrl",
        "http://localhost:6006/"
      ]
    }
  }
}