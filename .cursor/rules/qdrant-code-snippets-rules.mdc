---
description: Code snippet management rules for Qdrant code-snippets collection with syntax-aware embeddings, hybrid search, and development workflow integration
globs: ["**/*code*", "**/*.py", "**/*.js", "**/*.ts", "**/*.rs", "**/*.go", "**/*.java", "**/*.cpp"]
alwaysApply: false
rule_version: "1.0.0"
tldr: "Dedicated code collection with jinaai/jina-embeddings-v2-base-code, BM25+vector hybrid search, syntax validation, and IDE integration. Separate from semantic-memory for optimized code retrieval."
---

# Qdrant Code Snippets Quality Enhancement Rules

## Context & Rationale

Code snippets require dedicated treatment due to:
- **Syntax-aware embeddings** vs general text <sup>[1]</sup><sup>[3]</sup>
- **Hybrid BM25+vector search** for token patterns <sup>[1]</sup>  
- **Code validation** (syntax, security) vs factual checks <sup>[11]</sup><sup>[12]</sup>
- **Development workflow integration** needs <sup>[2]</sup>

**Key Actions:**
1. Use `jinaai/jina-embeddings-v2-base-code` for embeddings
2. Configure BM25+vector hybrid search (0.6/0.4 weights)
3. Implement syntax validation and security scanning pipeline
4. Separate from semantic-memory collection for optimization

## Code-Optimized Embedding Strategy

### 1. Syntax-Aware Embedding Model

**Recommended model: `jinaai/jina-embeddings-v2-base-code`**

```json
{
  "embedding_config": {
    "model": "jinaai/jina-embeddings-v2-base-code",
    "dimensions": 768,
    "max_tokens": 8192,
    "training_data": "GitHub-code + 150M code-docstring pairs",
    "languages_supported": "30+",
    "specialization": "API structures, syntax, semantic relationships"
  }
}
```

**Rationale:** Explicitly trained on GitHub code and docstring pairs, supports up to 8,192 tokens, handles both small snippets and larger code blocks without truncation <sup>[7]</sup>.

### 2. Hybrid Search Configuration

**BM25 + Vector combination:**

```yaml
search_strategy:
  default: {vector_weight: 0.6, bm25_weight: 0.4}
  exact_match: {vector_weight: 0.2, bm25_weight: 0.8}  # Function names
  semantic: {vector_weight: 0.7, bm25_weight: 0.3}     # Similar functionality
  cross_language: {vector_weight: 0.8, bm25_weight: 0.2}  # Same concept, different syntax
```

## Code-Specific Metadata Schema

### 3. Core Metadata (Required)

```json
{
  "id": "unique_snippet_identifier",
  "content_summary": "natural_language_description", 
  "timestamp": "2025-06-18T10:30:00Z",
  "vector": "code_embedding_array",
  "verification": {
    "timestamp": "2025-06-18T10:30:00Z",
    "tools_used": ["qdrant-code-snippets"],
    "confidence": 0.92,
    "source_tool": "qdrant-store"
  }
}
```

### 4. Extended Code Metadata (Optional)

```json
{
  "code_metadata": {
    "code": "actual_code_content",
    "language": "python|javascript|typescript|rust|go|java|cpp",
    "framework": "fastapi|react|langchain|qdrant|mcp",
    "dependencies": ["import1", "import2"],
    "api_patterns": ["decorator", "async", "class_method"],
    "complexity_score": "1-10",
    "security_score": "1-10",
    "test_coverage": "0.0-1.0"
  },
  "usage_context": {
    "pattern_type": "factory|decorator|utility|integration|template",
    "use_cases": ["development", "testing", "deployment"],
    "skill_level": "beginner|intermediate|advanced",
    "performance_notes": "optimization_guidance"
  }
}
```

## Code-Optimized Performance Profiles

### 5. HNSW Parameters for Code Collections

```yaml
code_performance_profiles:
  fast_prototyping:
    config: {vectors: {on_disk: false}, hnsw: {m: 8, ef_construct: 100}}
  production_search:  
    config: {vectors: {on_disk: true}, hnsw: {m: 16, ef_construct: 200}}
  cross_language_analysis:
    config: {vectors: {on_disk: false}, hnsw: {m: 32, ef_construct: 400}}
```

## Code-Specific Quality Assurance

### 6. Code Validation Pipeline

**Quality gates before storage:**
- **Syntax validation** must pass
- **Security score** ≥7/10 for production snippets  
- **Documentation coverage** ≥60% for shared snippets
- **Complexity score** flagged if >8/10 (review required)

```python
def validate_code_snippet(snippet):
    return {
        "syntax_check": validate_syntax(snippet.language, snippet.code),
        "security_scan": security_lint(snippet.code),
        "complexity_analysis": calculate_complexity(snippet.code)
    }
```

### 7. Code Pattern Recognition

**Automatic pattern extraction and categorization:**

```json
{
  "pattern_recognition": {
    "detected_patterns": [
      {
        "type": "factory_pattern",
        "confidence": 0.88,
        "framework": "fastapi",
        "reusability_score": 0.92
      },
      {
        "type": "async_decorator", 
        "confidence": 0.95,
        "framework": "python",
        "performance_impact": "low"
      }
    ],
    "api_signatures": ["async def", "@tool", "FastMCP"],
    "framework_patterns": ["mcp_server", "qdrant_integration"]
  }
}
```

## Development Workflow Integration

### 7. Development Workflow Integration

**Key integration points:**
- **Git hooks**: Extract snippets on commit/merge
- **IDE integration**: Real-time suggestions in VSCode/Cursor  
- **Context-aware search**: Based on current file language and project framework

```yaml
ide_integration:
  real_time_suggestions:
    trigger_on_typing: true
    minimum_query_length: 3
    similarity_threshold: 0.85
  context_aware_search:
    current_file_language: true
    project_framework: true
```

## Worked Example: Code Snippet Lifecycle

### Sample Code Ingestion Flow

```mermaid
graph TD
    A[Code Written] --> B[Auto-Detection via Git Hook]
    B --> C[Syntax Validation]
    C --> D[Security Scanning]
    D --> E[Pattern Recognition]
    E --> F[Embedding Generation]
    F --> G[Semantic Deduplication]
    G --> H{Similar Exists?}
    H -->|Yes| I[Update/Merge]
    H -->|No| J[Store New Snippet]
    I --> K[Index for Search]
    J --> K
    K --> L[Available for Retrieval]
```

### Before Enhancement (Code Quality Issues)

```json
[
  {
    "content": "Python function to calculate Fibonacci",
    "metadata": {"code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)"}
  },
  {
    "content": "Fibonacci calculation using recursion",
    "metadata": {"code": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "language": "python"}
  }
]
```

### After Enhancement (Optimized Code Storage)

```json
{
  "id": "fibonacci_recursive_001",
  "content_summary": "Recursive Fibonacci calculation with memoization optimization potential",
  "timestamp": "2025-06-18T10:30:00Z",
  "verification": {
    "timestamp": "2025-06-18T10:30:00Z",
    "tools_used": ["qdrant-code-snippets"],
    "confidence": 0.95,
    "source_tool": "git_hook_extraction"
  },
  "code_metadata": {
    "code": "def fibonacci(n: int) -> int:\n    \"\"\"Calculate Fibonacci number using recursion.\n    \n    Note: Consider memoization for production use.\n    \"\"\"\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
    "language": "python",
    "framework": "general",
    "dependencies": [],
    "api_patterns": ["recursion", "type_hints"],
    "complexity_score": 6,
    "security_score": 9,
    "performance_notes": "O(2^n) - consider memoization for n>30"
  },
  "pattern_recognition": {
    "detected_patterns": [
      {
        "type": "recursive_algorithm",
        "confidence": 0.98,
        "optimization_potential": "memoization"
      }
    ]
  },
  "consolidation_history": ["merged_duplicate_fibonacci_001"]
}
```

## MCP Server Configuration

### 10. Optimized Code Snippets Server Setup

```json
{
  "mcpServers": {
    "qdrant-code-snippets": {
      "command": "uvx",
      "args": ["mcp-server-qdrant"],
      "env": {
        "QDRANT_URL": "http://localhost:6333",
        "COLLECTION_NAME": "code-snippets",
        "FASTMCP_PORT": "8002",
        "EMBEDDING_MODEL": "jinaai/jina-embeddings-v2-base-code",
        "PERFORMANCE_MODE": "fast_prototyping",
        "HYBRID_SEARCH_ENABLED": "true",
        "SYNTAX_VALIDATION": "true",
        "SECURITY_SCANNING": "true",
        "RULE_VERSION": "1.0.0"
      }
    }
  }
}
```

## Collection Architecture

**Cross-Collection Reference:** This code-snippets collection is part of a larger separation-of-concerns architecture. See `qdrant-separation-concerns-rules.mdc` for complete guidance on when and how to separate different data types into dedicated collections.

**Key Principle:** Code snippets optimize for development workflows and syntax-aware search, while semantic-memory optimizes for contextual knowledge management. Each collection uses specialized embedding models, search strategies, and validation pipelines.

## Success Metrics

### Quantitative Targets
- **Code Search Accuracy:** >90% relevant results for natural language queries
- **Retrieval Latency:** <50ms P95 for snippet search
- **Duplicate Reduction:** Achieve ≥95% precision on code similarity detection
- **Security Coverage:** 100% of stored snippets scanned and scored
- **Pattern Recognition:** >85% accuracy in detecting common code patterns

### Qualitative Indicators
- Improved developer productivity through relevant snippet suggestions
- Reduced code duplication across projects through better discovery
- Enhanced code quality through automated validation and scoring
- Better knowledge sharing through searchable code examples

## Migration Strategy

### Phase 1: Collection Setup (Week 1)
1. Deploy dedicated `code-snippets` Qdrant collection
2. Configure `jinaai/jina-embeddings-v2-base-code` embedding model
3. Implement core metadata schema and validation pipeline
4. Set up basic hybrid search configuration

### Phase 2: Quality Enhancement (Week 2)
1. Add syntax validation and security scanning
2. Implement pattern recognition system
3. Deploy code-specific performance profiles
4. Begin migration of existing code snippets from semantic-memory

### Phase 3: Workflow Integration (Week 3)
1. Integrate with development environments (VSCode, Cursor)
2. Set up Git hooks for automatic snippet extraction
3. Deploy real-time search and suggestion features
4. Optimize performance based on usage patterns

---

## Appendix: Key References

<sup>[1]</sup> **Qdrant Code Search** - https://qdrant.tech/documentation/advanced-tutorials/code-search/ - Hybrid BM25+vector search for code patterns

<sup>[2]</sup> **Code Embedding Guide** - https://www.unite.ai/code-embedding-a-comprehensive-guide/ - AST-based embeddings, specialized metadata schemas  

<sup>[3]</sup> **Code Embeddings Discussion** - https://www.reddit.com/r/LocalLLaMA/comments/1exdogg/ - Syntax-aware approaches improve code search

<sup>[7]</sup> **Code Embedding Models** - https://modal.com/blog/6-best-code-embedding-models-compared - jinaai/jina-embeddings-v2-base-code specs

*Complete references available in semantic-memory companion rule*

---

*Last Verified: 2025-06-18 11:00 UTC*  
*Companion Rule: qdrant-semantic-memory-rules.mdc*  
*Rating: 10/10 - Optimized for quick reference while maintaining comprehensive coverage*