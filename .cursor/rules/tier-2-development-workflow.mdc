---
description: 
globs: 
alwaysApply: false
---
# Development Workflow (Tier 2) - Primary Development

## Environment Activation (REQUIRED)

**Always activate the Python virtual environment before running any code or tests:**

```bash
# If using .venv directory
source .venv/bin/activate

# If using uv
uv venv .venv
source .venv/bin/activate
```

## Quick Start

```bash
# Install dependencies with UV (recommended)
uv sync

# Environment configuration
cp .env.example .env
# Edit .env with your API keys and configurations

# Start development server
python run.py
# OR
uvicorn src.main_api:app --reload --port 8000
```

## Dependency Management

Install the appropriate dependency group for your workflow:

```bash
# Base dependencies
uv pip install .

# Development dependencies  
uv pip install .[dev]

# Test dependencies
uv pip install .[test]

# All dependencies
uv pip install .[dev,test]
```

## Container Development
```bash
# Full stack with Qdrant
docker-compose up -d

# Development mode with hot reload
docker-compose -f docker-compose.dev.yml up
```

## Testing Commands

### Essential Test Commands
```bash
# All tests
python -m pytest tests/ -v

# MCP Server Verification (Primary)
uv run python tests/integration/verify_mcp.py

# FastAPI-MCP Quality Comparison
uv run pytest tests/integration/functional_quality_comparison.py -v

# Integration Test Suite
uv run pytest tests/integration/ -v

# Unit tests
uv run pytest tests/unit/ -v

# Performance tests
uv run pytest tests/performance/ -v
```

### MCP Schema Management (NEW)
```bash
# Legacy approach - export MCP server schemas (run after tool changes)
python scripts/mcp/export_mcp_schema.py

# Validate MCP schema compliance
python scripts/mcp/validate_mcp_schema.py

# Combined schema export and validation
python scripts/mcp/export_mcp_schema.py && python scripts/mcp/validate_mcp_schema.py

# RECOMMENDED - Native schema discovery via streamable HTTP
# Start server
python src/mcp_server/fastapi_wrapper.py &

# Discover schema via HTTP
curl -X POST http://127.0.0.1:8000/mcp \
  -H "Content-Type: application/json" \
  -d '{"jsonrpc":"2.0","id":1,"method":"rpc.discover","params":{}}'
```

### Coverage and Quality
```bash
# Coverage report
pytest --cov=src --cov-report=html

# Linting with ruff
ruff check src/ tests/

# Type checking with mypy
mypy src/
```

## Troubleshooting

### Common Issues
- **ModuleNotFoundError**: Ensure environment is activated and dependencies installed
- **Import errors**: Check `PYTHONPATH` and use absolute imports
- **Test discovery issues**: Verify test file naming (`test_*.py`, `Test*` classes, `test_*` functions)
- **Missing dependencies**: Use `uv pip list | grep <package-name>` to verify installation
- **MCP schema validation failures**: Check [mcp_config.toml](mdc:scripts/mcp/mcp_config.toml) and ensure schema URL is accessible

### Environment Validation
```bash
# Check if package is installed
uv pip list | grep <package-name>

# Verify environment activation
which python

# Check project dependencies
uv pip check

# Verify MCP server can be imported
python -c "from src.mcp_server.fastapi_wrapper import mcp; print('âœ… MCP import success')"
```

## Schema Management Workflow

### After Tool Changes
```bash
# 1. Export updated schemas
python scripts/mcp/export_mcp_schema.py

# 2. Validate compliance
python scripts/mcp/validate_mcp_schema.py

# 3. Review generated files
# - mcp_server_official.json (use this for production)
# - mcp_server_schema.json (legacy format)
```

### CI/CD Integration
Include schema validation in your CI pipeline:
```bash
# Schema compliance check (exit code 0 = pass, 1 = fail)
python scripts/mcp/validate_mcp_schema.py
```

All configuration flows through **[settings.py](mdc:src/settings.py)** using Pydantic BaseSettings with environment variables loaded from `.env`.

MCP schema configuration is managed via **[mcp_config.toml](mdc:scripts/mcp/mcp_config.toml)** for protocol compliance and governance settings.
