---
description: 
globs: 
alwaysApply: false
---
# Security-First Refactoring Rule

## Purpose
Enforces strict security boundaries during refactoring and development assistance, preventing exposure of sensitive information while maintaining helpful debugging capabilities.

## Core Security Principles

### 1. Assume Sensitivity by Default
- **ALL** configuration files contain sensitive data until proven otherwise
- **NEVER** access `.env`, `config.*`, or credential files without explicit user permission
- **TREAT** environment variables as potentially sensitive
- **RESPECT** privacy settings and ignore files absolutely

### 2. Privacy Mode Enforcement
- Honor `.cursorignore` and `.cursorindexingignore` files completely
- Respect Privacy Mode settings without exception
- Block access to files that should be protected
- Provide security warnings before potentially exposing commands

### 3. Explicit Consent Protocol
- **REQUIRE** explicit user permission before accessing potentially sensitive files
- **ASK** before running commands that might expose credentials
- **WARN** about security implications of debugging commands
- **OFFER** privacy-preserving alternatives

## Prohibited Actions

### File Access Restrictions
```bash
# ❌ NEVER run these without explicit user consent:
cat .env
cat config.yml
cat secrets.json
printenv | grep -i api
env | grep -i key
echo $OPENAI_API_KEY
```

### Environment Variable Exposure
```bash
# ❌ NEVER expose environment variables:
env | grep -i api
printenv
echo $API_KEY
set | grep -i secret
```

### Configuration File Access
```bash
# ❌ NEVER access these file types without permission:
cat .env*
cat config.*
cat secrets.*
cat credentials.*
cat *.key
cat *.pem
```

## Secure Debugging Alternatives

### Instead of Direct File Access
```bash
# ✅ Check if file exists without reading content
ls -la .env
file .env
stat .env

# ✅ Check configuration structure without values
grep -c "=" .env  # Count settings without showing them
wc -l .env        # Show line count only
```

### Instead of Environment Variable Exposure
```bash
# ✅ Check if variables are set without showing values
python -c "import os; print('OPENAI_API_KEY:', 'SET' if os.getenv('OPENAI_API_KEY') else 'NOT SET')"
python -c "import os; print('API_KEY:', 'SET' if os.getenv('API_KEY') else 'NOT SET')"
```

### Instead of Full Configuration Dumps
```bash
# ✅ Validate configuration without exposing values
python -c "from src.core.settings import get_settings; s = get_settings(); print('Settings loaded successfully')"
python -c "from src.core.settings import get_settings; s = get_settings(); print(f'Found {len(s.dict())} settings')"
```

## User Consent Protocol

### Before Accessing Sensitive Files
```
⚠️ SECURITY NOTICE ⚠️
I need to access [filename] which may contain sensitive information.
This file could contain API keys, passwords, or other credentials.

Options:
1. You can share the relevant non-sensitive parts manually
2. You can confirm the file only contains test/dummy data
3. I can suggest alternative debugging approaches

Do you explicitly consent to me accessing this file? (yes/no)
```

### Before Running Exposing Commands
```
⚠️ PRIVACY NOTICE ⚠️
The command I want to run might expose environment variables or configuration:
Command: [command]

This could reveal sensitive information. Alternatives:
- [list privacy-preserving alternatives]

Do you want me to proceed with this command? (yes/no)
```

## Refactoring Security Checklist

### Pre-Refactoring Security Assessment
- [ ] Identify all configuration files in the project
- [ ] Check for `.cursorignore` and respect its contents
- [ ] Verify Privacy Mode settings are honored
- [ ] Plan debugging approach that avoids sensitive file access

### During Refactoring
- [ ] Use privacy-preserving validation methods
- [ ] Ask for consent before accessing any config files
- [ ] Provide security warnings for potentially exposing commands
- [ ] Offer alternative debugging approaches

### Post-Refactoring Security Validation
- [ ] Verify no sensitive information was exposed in conversation
- [ ] Confirm privacy boundaries were maintained
- [ ] Document any security considerations for future work
- [ ] Update security documentation if needed

## Integration with Other Rules

### With validation-integrity.mdc
- Use secure validation methods that don't expose credentials
- Provide evidence without revealing sensitive configuration
- Test functionality without compromising security

### With process-task-list.mdc
- Include security checkpoints in task progression
- Require security approval for sensitive operations
- Document security considerations in task updates

## Emergency Procedures

### If Sensitive Data is Accidentally Exposed
1. **IMMEDIATELY** acknowledge the security breach
2. **STOP** the current operation
3. **ADVISE** user to rotate any exposed credentials
4. **DOCUMENT** what was exposed and when
5. **IMPLEMENT** additional safeguards to prevent recurrence

### If Privacy Settings are Bypassed
1. **REPORT** the privacy control failure
2. **RECOMMEND** strengthening privacy settings
3. **SUGGEST** additional protective measures
4. **AVOID** further potentially sensitive operations

## Secure Development Patterns

### Configuration Management
```python
# ✅ Secure way to validate settings
def validate_config_safely():
    try:
        settings = get_settings()
        required_keys = ['openai_api_key', 'cohere_api_key']
        missing = [key for key in required_keys if not getattr(settings, key, None)]
        if missing:
            print(f"Missing configuration: {missing}")
        else:
            print("All required configuration present")
    except Exception as e:
        print(f"Configuration error: {e}")
```

### Environment Validation
```python
# ✅ Check environment without exposing values
def check_environment_safely():
    import os
    required_vars = ['OPENAI_API_KEY', 'COHERE_API_KEY']
    status = {var: 'SET' if os.getenv(var) else 'NOT SET' for var in required_vars}
    print("Environment status:", status)
```

## Success Metrics

### Security Compliance
- Zero unauthorized access to sensitive files
- All privacy settings respected
- No credential exposure in conversation logs
- User consent obtained for all potentially sensitive operations

### Process Integrity
- Security checkpoints integrated into development workflow
- Alternative debugging methods successfully employed
- Privacy-preserving validation methods used consistently

## Remember
**Security first, convenience second. Privacy is not negotiable. When in doubt, ask for permission.**

## Common Secure Alternatives

| Instead of | Use |
|------------|-----|
| `cat .env` | Ask user to share relevant non-sensitive parts |
| `env \| grep API` | `python -c "import os; print('API_KEY:', 'SET' if os.getenv('API_KEY') else 'NOT SET')"` |
| `echo $SECRET` | Ask user to confirm if variable is set |
| Direct config access | Use application's settings validation methods |
| Full environment dump | Check specific variables with SET/NOT SET status |
