---
description: 
globs: 
alwaysApply: true
---
# Test Execution & Environment Activation Rule

## Python Environment Activation
- **Always activate the Python virtual environment before running any code or tests.**
  - If using a `.venv` directory, run:
    ```bash
    source .venv/bin/activate
    ```
  - If using `uv`, use:
    ```bash
    uv venv .venv
    source .venv/bin/activate
    ```
- **Do not run `python` or `pytest` commands outside the activated environment.**

## Dependency Management
- All dependencies (including test and dev dependencies) are specified in [pyproject.toml](mdc:pyproject.toml).
- To install dependencies, use the appropriate group for your workflow:

### Dependency Groups
- **Base dependencies:**
  ```bash
  uv pip install .
  ```
- **Development dependencies:**
  ```bash
  uv pip install .[dev]
  ```
- **Test dependencies:**
  ```bash
  uv pip install .[test]
  ```
- **All (dev + test):**
  ```bash
  uv pip install .[dev,test]
  ```

**Use the appropriate group for your workflow:**
- For development: `[dev]`
- For running tests: `[test]` or `[dev,test]`
- For production: base only

- To check if a package is installed in the current environment:
  ```bash
  uv pip list | grep <package-name>
  ```

## Running Tests
- Use `pytest` for all test execution. Example:
  ```bash
  python -m pytest tests/ -v
  # or for a specific test file:
  python -m pytest tests/functional_quality_comparison.py -v
  ```
- If you see `ModuleNotFoundError` or missing dependency errors, ensure the environment is activated and all dependencies are installed.
- For async tests, ensure `pytest-asyncio` is installed (it is in [pyproject.toml](mdc:pyproject.toml)).

## Best Practices
- Always activate the environment before running or debugging tests.
- Use `uv pip list` to confirm package presence in the active environment.
- Reference [pyproject.toml](mdc:pyproject.toml) for all dependency questions.
- If you add a new dependency, add it to [pyproject.toml](mdc:pyproject.toml) and re-install.
- For CI/CD, ensure the environment is set up and activated before test steps, and install the correct dependency group for the job (e.g., `[test]` for test jobs).

## Troubleshooting
- If tests are not discovered, check for correct naming (`test_*.py`, `Test*` classes, `test_*` functions).
- If you see `ImportError`, check your environment activation and `PYTHONPATH`.
- If you see `collected 0 items`, ensure your test files contain valid test functions/classes.
