---
description: 
globs: 
alwaysApply: false
---
# Enhanced PRD for Refactoring Existing Codebases

## Purpose
Extends the successful create-prd.mdc approach specifically for refactoring, restructuring, and harvesting existing codebases, addressing unique challenges not present in greenfield development.

## Key Differences from Greenfield PRDs

### Existing Codebase Considerations
- **Current State Analysis**: Must understand existing architecture before proposing changes
- **Backward Compatibility**: Preserve existing functionality and interfaces
- **Migration Strategy**: Plan for gradual transition, not clean-slate implementation
- **Risk Assessment**: Higher complexity due to existing dependencies and integrations

### Enhanced Requirements Gathering

#### Pre-Refactoring Analysis Questions
- "What is the current pain point with the existing structure?"
- "Which parts of the current system work well and should be preserved?"
- "What are the existing dependencies and integration points?"
- "Are there any critical workflows that cannot be interrupted?"
- "What is the rollback strategy if refactoring fails?"

#### Refactoring-Specific Clarifications
- "What is the scope of the refactoring? (files, modules, architecture)"
- "Are there any existing tests that must continue to pass?"
- "What are the performance requirements during and after refactoring?"
- "Are there any deployment or environment constraints?"
- "Who are the stakeholders affected by structural changes?"

## Enhanced PRD Structure for Refactoring

### 1. Current State Assessment
**Required Section**: Document the existing architecture, pain points, and what works well.

```markdown
### Current State Assessment
- **Existing Architecture**: [Describe current structure]
- **Pain Points**: [What problems need solving]
- **Working Components**: [What should be preserved]
- **Dependencies**: [External and internal dependencies]
- **Integration Points**: [APIs, databases, services]
- **Performance Baseline**: [Current performance metrics]
```

### 2. Migration Strategy
**Required Section**: Plan the transition approach, not just the end state.

```markdown
### Migration Strategy
- **Approach**: [Big bang vs. gradual migration]
- **Phases**: [Step-by-step migration plan]
- **Rollback Plan**: [How to revert if needed]
- **Validation Gates**: [Checkpoints to verify progress]
- **Risk Mitigation**: [How to handle migration risks]
```

### 3. Backward Compatibility Requirements
**Required Section**: Define what must remain unchanged.

```markdown
### Backward Compatibility Requirements
- **Public APIs**: [Which interfaces must remain stable]
- **Data Formats**: [File formats, database schemas that cannot change]
- **Configuration**: [Settings that must remain compatible]
- **Integration Points**: [External systems that depend on current structure]
- **User Workflows**: [User-facing processes that cannot break]
```

### 4. Validation Strategy
**Required Section**: How to verify the refactoring succeeded.

```markdown
### Validation Strategy
- **Functional Testing**: [How to verify all features still work]
- **Performance Testing**: [Benchmarks to maintain or improve]
- **Integration Testing**: [Verify external connections still work]
- **User Acceptance**: [How to validate user workflows]
- **Rollback Triggers**: [Conditions that would require rollback]
```

## Refactoring-Specific Success Metrics

### Technical Metrics
- **Zero Breaking Changes**: All existing functionality preserved
- **Performance Maintained**: No regression in key performance indicators
- **Test Coverage**: All existing tests pass, new structure is testable
- **Import Compatibility**: All existing import statements work or have clear migration path

### Process Metrics
- **Migration Time**: Actual vs. planned refactoring duration
- **Rollback Events**: Number of times rollback was needed
- **Stakeholder Satisfaction**: Affected teams can work with new structure
- **Documentation Quality**: Clear migration guide for future developers

## Enhanced Risk Assessment for Refactoring

### High-Risk Factors
- **Complex Dependencies**: Circular imports, tight coupling
- **Missing Tests**: Areas without test coverage
- **External Integrations**: Systems that depend on current structure
- **Performance Critical Paths**: Code that must maintain specific performance
- **Concurrent Development**: Other teams making changes during refactoring

### Risk Mitigation Strategies
- **Incremental Approach**: Small, verifiable changes
- **Feature Flags**: Ability to toggle between old and new implementations
- **Comprehensive Testing**: Both automated and manual validation
- **Stakeholder Communication**: Regular updates to affected teams
- **Monitoring**: Real-time validation during migration

## Integration with Existing Rules

### Enhanced Task Generation
Works with [generate-tasks.mdc](mdc:.cursor/rules/generate-tasks.mdc) but adds refactoring-specific task types:
- **Analysis Tasks**: Understanding current state
- **Migration Tasks**: Gradual transition steps
- **Validation Tasks**: Verification at each step
- **Rollback Tasks**: Contingency planning

### Enhanced Process Management
Works with [process-task-list.mdc](mdc:.cursor/rules/process-task-list.mdc) but adds:
- **Validation Gates**: Must verify each step before proceeding
- **Rollback Checkpoints**: Points where rollback is still feasible
- **Stakeholder Approvals**: Additional approvals for structural changes

### Technical Standards Preservation
Works with tier rules ([tier-1-project-core.mdc](mdc:.cursor/rules/tier-1-project-core.mdc), etc.) to ensure:
- **Standards Compliance**: New structure meets all technical requirements
- **Pattern Preservation**: Existing architectural patterns maintained
- **Performance Requirements**: Technical constraints preserved

## Refactoring PRD Template

```markdown
# Refactoring PRD: [Project Name] - [Refactoring Scope]

## 1. Current State Assessment
[Document existing architecture and pain points]

## 2. Refactoring Goals
[What the refactoring aims to achieve]

## 3. Migration Strategy
[How to transition from current to target state]

## 4. Backward Compatibility Requirements
[What must remain unchanged]

## 5. Technical Requirements
[New structure requirements]

## 6. Non-Goals (Refactoring Scope Limits)
[What this refactoring will NOT change]

## 7. Validation Strategy
[How to verify success]

## 8. Risk Assessment & Mitigation
[Potential issues and solutions]

## 9. Success Metrics
[How to measure refactoring success]

## 10. Rollback Plan
[How to revert if needed]

## 11. Stakeholder Impact Analysis
[Who is affected and how]

## 12. Timeline & Phases
[Migration schedule and checkpoints]
```

## Success Patterns from Previous Refactoring

### What Worked Well
- **Structured approach**: PRD → Tasks → Validation worked effectively
- **Clear documentation**: Updated docs during refactoring, not after
- **Stakeholder framework**: Approval requirements provided good governance
- **Technical standards**: Tier-based rules preserved critical constraints

### Enhanced for Refactoring
- **Fresh validation**: Never rely on historical outputs for current state
- **Security boundaries**: Respect privacy settings during debugging
- **Evidence-based progress**: All completion claims backed by actual testing
- **Honest uncertainty**: Acknowledge what remains untested

## Remember
**Refactoring is not greenfield development. Existing systems have constraints, dependencies, and stakeholders that must be carefully managed throughout the process.**

## Output Requirements
- **Format**: Markdown (`.md`)
- **Location**: `/tasks/`
- **Filename**: `prd-refactoring-[scope].md`
- **Validation**: Must include all refactoring-specific sections
- **Approval**: Enhanced stakeholder approval including affected teams
