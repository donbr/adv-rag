---
description: 
globs: 
alwaysApply: false
---
# File Versioning Protocol - Maintain History & Avoid Duplication

## Core Principle

**Always update existing files instead of creating new versions.** Preserve git history and avoid content duplication.

## ❌ **Anti-Patterns**

### Creating Duplicate Files
```bash
# WRONG - Creates duplication and confusion
original-file.md → original-file-v2.md
config.yml → config-new.yml  
tier-1-rules.mdc → tier-1-rules-refined.mdc
```

### Manual File Copies
```bash
# WRONG - Loses version control history
cp old-config.yml new-config.yml
mv legacy-rules.md updated-rules.md
```

## ✅ **Correct Patterns**

### Update Files In-Place
```bash
# Use search_replace or edit_file to modify existing files
search_replace(file_path="existing-file.md", old_string="...", new_string="...")
edit_file(target_file="existing-file.md", instructions="Update section X")
```

### Show Clear Before/After
```bash
# Git diff shows exactly what changed
- old content
+ new content
```

### Version Control Integration
- Commit changes with descriptive messages
- Tag major updates appropriately
- Use branches for experimental changes

## Implementation Guidelines

### ✅ **Do's**
1. **Update existing files** using `search_replace` or `edit_file`
2. **Show clear diffs** to demonstrate changes
3. **Preserve file paths** and naming conventions
4. **Commit incremental changes** with good messages
5. **Use branches** for major restructuring

### ❌ **Don'ts**
1. **Don't create duplicate files** with version suffixes
2. **Don't rename files** without clear migration strategy
3. **Don't lose edit history** by creating new files
4. **Don't leave orphaned files** behind
5. **Don't skip documentation** of major changes

## Exception Cases

### When New Files Are Appropriate
- **Net new functionality** (new features, new modules)
- **Different file types** (config.yml vs config.json)
- **Clear migration paths** (with deprecation notices)
- **Archive purposes** (with clear naming like `archive/old-version/`)

### Migration Strategy Template
```markdown
# Migration Notice (in original file)
⚠️ **DEPRECATED**: This file has been replaced by `new-location.md`
- **Reason**: [Brief explanation]
- **Timeline**: Removal planned for [date]
- **Action Required**: Update references to new location
```

## Benefits of Proper Versioning

1. **Clear History**: Git log shows evolution of ideas
2. **Easy Rollback**: Can revert specific changes
3. **Reduced Confusion**: Single source of truth
4. **Better Collaboration**: Team sees incremental changes
5. **Maintainable Codebase**: No duplicate content to sync

## Enforcement

When asked to refine or update existing content:
1. **Always check** if file already exists
2. **Use update tools** instead of creating new files
3. **Show the diff** to demonstrate changes
4. **Clean up** any accidentally created duplicates
5. **Document** the rationale for changes

**Remember: Version control systems exist to track changes - use them properly instead of manual file versioning.**
