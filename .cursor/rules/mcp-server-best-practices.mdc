---
description: 
globs: 
alwaysApply: true
---
# MCP Server Prototyping & Testing Best Practices

This rule summarizes best practices for prototyping, structuring, and testing a Python MCP server, grounded in the official [quickstart](mdc:https:/modelcontextprotocol.io/quickstart/server), Inspector, and SDK documentation.

## Project Structure
- Use a `src/` layout with all server code in a package (e.g., `src/my_server/`).
- Place tests in a separate `tests/` directory at the project root.
- Example:
  ```
  my-mcp-server/
    src/
      my_server/
        __init__.py
        main.py         # FastMCP, tool/resource/prompt registration
        tools.py        # Tool implementations (optional)
        resources.py    # Resource implementations (optional)
        prompts.py      # Prompt templates (optional)
    tests/
      test_tools.py
      test_resources.py
      test_prompts.py
    pyproject.toml
    README.md
    .env
  ```

## Imports & Dependency Resolution
- Use **absolute imports** (e.g., `from my_server.tools import ...`).
- Set `PYTHONPATH` to the project root or use `python -m my_server.main` for direct runs.
- Avoid relative imports and running scripts from within the `src/` directory.
- For Inspector/CLI, always invoke with the correct working directory or use a wrapper script that sets `PYTHONPATH`.

## Inspector & Testing Workflow
- Use [MCP Inspector](mdc:https:/modelcontextprotocol.io/docs/tools/inspector) for interactive and regression testing:
  ```bash
  npx @modelcontextprotocol/inspector uv --directory src/my_server run main.py
  ```
- Inspector allows you to:
  - List and invoke tools, resources, and prompts
  - View logs and notifications
  - Validate capability negotiation and error handling
- For automated tests, use `pytest` or `unittest` with the project root as CWD.
- For integration tests, use the [Python MCP client quickstart](mdc:https:/modelcontextprotocol.io/quickstart/client) to connect and exercise the full protocol.

## Incremental Prototyping
- Start with a minimal server (one tool, no resources), test with Inspector after every change.
- Add features incrementally (resources, prompts, more tools).
- Use structured logging (stderr for local, log notifications for remote).
- Automate tests with `pytest` and, if possible, with a scripted MCP client.

## References
- [MCP Server Quickstart (Python)](mdc:https:/modelcontextprotocol.io/quickstart/server)
- [Inspector Guide](mdc:https:/modelcontextprotocol.io/docs/tools/inspector)
- [Debugging Guide](mdc:https:/modelcontextprotocol.io/docs/tools/debugging)
- [Reference Servers](mdc:https:/modelcontextprotocol.io/examples)

## Common Pitfalls
- Module import errors: Always check `PYTHONPATH` and use absolute imports.
- Inspector/CLI issues: Use wrapper scripts to set up the environment.
- No official cookiecutter: Copy and adapt the quickstart/reference servers for new projects.
