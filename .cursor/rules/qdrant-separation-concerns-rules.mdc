---
description: Separation of concerns principles for Qdrant collections - when and how to split data types into dedicated collections for optimal performance
globs: ["**/*qdrant*", "**/*vector*", "**/*collection*"]
alwaysApply: true
rule_version: "1.0.0"
tldr: "Core principle: Store different data types (code vs context vs documents) in separate Qdrant collections with tailored embedding models, search strategies, and optimization profiles."
---

# Qdrant Collection Separation of Concerns Rules

## Core Principle

**Different data types require different optimization strategies.** Mixing code snippets, semantic memory, and other content types in a single collection leads to suboptimal performance, confused search results, and maintenance complexity.

**Key Decision Framework:**
1. **Embedding Model Requirements** - Does the data need specialized embeddings?
2. **Search Strategy** - Vector-only vs hybrid BM25+vector vs full-text?
3. **Performance Profile** - Speed vs accuracy vs volume optimization?
4. **Validation Pipeline** - Different quality gates and validation rules?

## Collection Separation Matrix

| Data Type | Collection Name | Embedding Model | Search Strategy | Primary Use Case |
|-----------|----------------|-----------------|-----------------|------------------|
| **Code Snippets** | `code-snippets` | `jinaai/jina-embeddings-v2-base-code` | BM25+Vector (0.6/0.4) | Development, IDE integration |
| **Semantic Memory** | `semantic-memory` | `text-embedding-3-small` | Vector-focused (0.8/0.2) | Knowledge management, decisions |
| **Documentation** | `docs-knowledge` | `text-embedding-3-small` | Vector+BM25 (0.7/0.3) | Reference, help systems |
| **Conversations** | `chat-history` | `text-embedding-3-small` | Vector-only (1.0/0.0) | Context retrieval, insights |
| **Media Content** | `media-embeddings` | Multimodal embeddings | Vector-only (1.0/0.0) | Image/audio search |

## When to Create Separate Collections

### ✅ **Always Separate When:**

1. **Different Embedding Models Needed**
   ```yaml
   # Code needs syntax-aware embeddings
   code_collection:
     embedding_model: "jinaai/jina-embeddings-v2-base-code"
     dimensions: 768
   
   # Text needs general embeddings  
   semantic_collection:
     embedding_model: "text-embedding-3-small"
     dimensions: 1536
   ```

2. **Distinct Search Patterns**
   ```yaml
   # Code: Exact matching important (function names, APIs)
   code_search: {vector: 0.6, bm25: 0.4}
   
   # Semantic: Conceptual similarity priority
   semantic_search: {vector: 0.8, bm25: 0.2}
   ```

3. **Different Performance Requirements**
   ```yaml
   # Code: Low latency for IDE integration
   code_config: {vectors: {on_disk: false}, hnsw: {m: 8}}
   
   # Semantic: Higher accuracy for research
   semantic_config: {vectors: {on_disk: true}, hnsw: {m: 16}}
   ```

4. **Incompatible Validation Pipelines**
   ```python
   # Code validation
   def validate_code(snippet):
       return syntax_check(snippet) and security_scan(snippet)
   
   # Semantic validation  
   def validate_semantic(memory):
       return has_verification(memory) and check_provenance(memory)
   ```

### ❌ **Avoid Separation When:**

1. **Same embedding model and search strategy**
2. **Similar performance requirements** 
3. **Shared validation logic**
4. **Low volume data** (<1000 entries per type)
5. **Temporary/experimental data** that will be cleaned up

## Shared Infrastructure Patterns

### Common MCP Configuration Template

```json
{
  "mcpServers": {
    "{collection-name}": {
      "command": "uvx",
      "args": ["mcp-server-qdrant"],
      "env": {
        "QDRANT_URL": "http://localhost:6333",
        "COLLECTION_NAME": "{collection-name}",
        "FASTMCP_PORT": "{unique-port}",
        "EMBEDDING_MODEL": "{specialized-model}",
        "PERFORMANCE_MODE": "{optimized-profile}",
        "RULE_VERSION": "1.0.0"
      }
    }
  }
}
```

### Shared Metadata Schema Foundation

**Core fields (required across all collections):**
```json
{
  "id": "unique_identifier",
  "content": "actual_content",
  "timestamp": "2025-06-18T10:30:00Z",
  "vector": "embedding_array",
  "verification": {
    "timestamp": "2025-06-18T10:30:00Z",
    "tools_used": ["tool1", "tool2"],
    "confidence": 0.92,
    "source_tool": "primary_tool"
  }
}
```

**Extended fields (collection-specific):**
- **Code collections**: `language`, `framework`, `dependencies`, `security_score`
- **Semantic collections**: `domain`, `tier_level`, `stakeholders`, `business_impact`
- **Document collections**: `doc_type`, `section`, `last_updated`, `author`

### Governance Consistency

**Shared versioning and governance across all collections:**

```yaml
shared_governance:
  rule_version: "1.0.0"
  change_policy:
    MAJOR: "Breaking schema changes"
    MINOR: "New optional fields or profiles"
    PATCH: "Threshold tuning or bug fixes"
  
  quality_standards:
    verification_required: true
    confidence_threshold: 0.7
    deduplication_precision: 0.95
```

## Collection-Specific Optimization Guidelines

### Code Collections (`code-snippets`)

**Optimization Focus: Speed + Syntax Awareness**

```yaml
code_optimization:
  embedding_model: "jinaai/jina-embeddings-v2-base-code"
  search_strategy: "hybrid_bm25_vector"
  storage_config: {vectors: {on_disk: false}}  # Speed priority
  hnsw_config: {m: 8, ef_construct: 100}      # Fast indexing
  validation: ["syntax_check", "security_scan", "complexity_analysis"]
```

### Semantic Collections (`semantic-memory`)

**Optimization Focus: Accuracy + Context Understanding**

```yaml
semantic_optimization:
  embedding_model: "text-embedding-3-small"
  search_strategy: "vector_focused"
  storage_config: {vectors: {on_disk: true}}   # Volume handling
  hnsw_config: {m: 16, ef_construct: 200}     # Accuracy priority
  validation: ["verification_check", "provenance_validation", "confidence_scoring"]
```

### Documentation Collections (`docs-knowledge`)

**Optimization Focus: Comprehensive Retrieval**

```yaml
docs_optimization:
  embedding_model: "text-embedding-3-small"
  search_strategy: "balanced_hybrid"
  storage_config: {vectors: {on_disk: true}}
  hnsw_config: {m: 12, ef_construct: 150}
  validation: ["freshness_check", "authority_validation", "completeness_scoring"]
```

## Migration Strategy for Existing Mixed Collections

### Phase 1: Assessment (Week 1)

1. **Analyze current collection contents**
   ```python
   def analyze_collection_contents():
       entries_by_type = categorize_existing_entries()
       return {
           "code_snippets": count_code_entries(),
           "semantic_memory": count_semantic_entries(),
           "documentation": count_doc_entries(),
           "mixed_types": count_ambiguous_entries()
       }
   ```

2. **Identify separation candidates**
   - Different embedding needs
   - Distinct search patterns
   - Performance bottlenecks
   - Validation conflicts

### Phase 2: Collection Creation (Week 2)

1. **Create specialized collections**
   ```bash
   # Create code-specific collection
   curl -X PUT "localhost:6333/collections/code-snippets" \
     -H "Content-Type: application/json" \
     -d '{"vectors": {"size": 768, "distance": "Cosine"}}'
   
   # Create semantic-specific collection  
   curl -X PUT "localhost:6333/collections/semantic-memory" \
     -H "Content-Type: application/json" \
     -d '{"vectors": {"size": 1536, "distance": "Cosine"}}'
   ```

2. **Configure MCP servers**
   - Deploy separate MCP servers for each collection
   - Use unique ports (8002, 8003, 8004, etc.)
   - Configure specialized embedding models

### Phase 3: Data Migration (Week 3)

1. **Migrate data with re-embedding**
   ```python
   def migrate_entries_by_type():
       for entry in old_collection:
           target_collection = determine_target_collection(entry)
           new_embedding = generate_specialized_embedding(entry, target_collection)
           store_in_new_collection(entry, new_embedding, target_collection)
   ```

2. **Validate migration quality**
   - Verify search result quality in new collections
   - Compare performance metrics
   - Test collection-specific features

### Phase 4: Cleanup (Week 4)

1. **Deprecate old mixed collection**
2. **Update client applications**
3. **Monitor performance improvements**
4. **Document new collection architecture**

## Cross-Collection Operations

### Federated Search Pattern

**When you need to search across multiple collections:**

```python
async def federated_search(query: str, collections: List[str]):
    """Search across multiple specialized collections"""
    results = []
    
    for collection in collections:
        # Use collection-specific search strategy
        collection_results = await search_collection(
            collection_name=collection,
            query=query,
            strategy=get_search_strategy(collection)
        )
        results.extend(collection_results)
    
    # Normalize and rank results across collections
    return normalize_and_rank(results)
```

### Cross-Collection References

**Maintain relationships between different data types:**

```json
{
  "semantic_entry": {
    "id": "decision_fastmcp_001",
    "content": "Decision to use FastMCP architecture",
    "cross_references": {
      "code_examples": ["code-snippets:fastmcp_example_001"],
      "documentation": ["docs:fastmcp_integration_guide"]
    }
  }
}
```

## Success Metrics for Separation

### Performance Improvements
- **Search latency reduction**: 20-50% improvement in specialized collections
- **Relevance improvement**: 15-30% better search precision
- **Storage efficiency**: 10-25% reduction in memory usage

### Operational Benefits
- **Simplified maintenance**: Collection-specific optimization and tuning
- **Clear ownership**: Teams can own specific collections
- **Reduced conflicts**: No embedding model or search strategy compromises

### Quality Indicators
- **Fewer false positives**: Code searches don't return semantic content
- **Better user experience**: Specialized interfaces for different data types
- **Easier troubleshooting**: Issues isolated to specific collections

---

## References and Best Practices

**Collection Design Principles:**
- Separate collections for different embedding requirements <sup>[1]</sup>
- Optimize HNSW parameters per data type <sup>[2]</sup>  
- Use specialized validation pipelines <sup>[3]</sup>
- Maintain governance consistency across collections <sup>[4]</sup>

**Implementation Guidance:**
- Start with clear separation criteria
- Share common infrastructure patterns
- Plan migration carefully with re-embedding
- Monitor performance improvements post-separation

---

*Last Verified: 2025-06-18 11:20 UTC*  
*Applies To: All Qdrant-based MCP implementations*  
*Rating: Essential - Foundation for scalable vector database architecture*